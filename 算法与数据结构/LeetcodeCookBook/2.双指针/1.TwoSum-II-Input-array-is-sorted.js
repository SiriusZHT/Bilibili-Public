// 双指针
// 双指针只要用于遍历数组 两个指针指向不同元素 协同完成任务 也可以延伸到多个数组的多个指针
// 若两个指针指向同一个数组 遍历方向相同 且 不会相交 就成为 滑动窗口
// 滑动窗口： 两个指针包围的区域 即当前的窗口 用于 「区间搜索」
// 若两个指针指向同一个数组 但是遍历方向相反，可以用来进行「搜索」，带搜索的数组往往是排好序的

// 167.Two Sum II - Input array is sorted (Easy)
// 题目描述
// 在一个增序的整数数组里 找到两个数 使他们的和为给定值 已知有且仅有一对解

// 输入输出样例
// 输入是一个数组（numbers）和一个给定值（target） 。输出是两个数的位置，从 1 开始计数。
// Input: numbers = [2,7,11,15], target = 9 Output: [1,2] 
// 在这个样例中，第一个数字（2）和第二个数字（7）的和等于给定值（9） 。

// 因为已经排好序 用相反的双指针找 一个指向最小的元素 即数组的左边 向右遍历；
// 另一个指向最大的元素，即数组最右边，向左遍历
// 如果两个指针的元素和 等于 给定值 就是想要的结果
// 小于给定值 把左边指针右移一位 让当前和增加
// 大于给定值 右边指针左移一位 让当前和减少

function twoSum(nums=[], target) {
    let [left, right, sum] = [0, nums.length - 1, 0];
    while(left < right){
        sum = nums[left] + nums[right];
        if(sum == target){
            break;
        }
        if(sum < target){ 
            ++left; 
        } else { 
            --right; 
        }
    }
    return [left + 1, right + 1];
}

console.log(twoSum([2,7,11,15], 9)); // [1, 2]
// 452.用最少的箭引爆气球（medium）

// 题目描述：
// 在二维空间中 有许多的球形气球 每个气球提供的输入是水平方向上，气球直径的开始和结束的坐标
// 由于他是水平的，所以纵坐标并不重要，因此还要知道开始和结束的横坐标就足够了
// 开始坐标总是小于结束坐标
// 一只弓箭可以沿着x轴从不同点完全垂直的射出 在坐标x处射出一只箭，
// 若有一个气球的直径的开始和结束坐标为 xstart xend
// 且 满足 xstart <= x <= xend 则该气球会被引爆 可以射出的弓箭数量没有限制
// 弓箭一旦被射出之后，可以无限的前进，我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量
// 给你一个数组 points 其中 points[i] = [xstart, xend],返回引爆所有气体所需要射出的最小弓箭数

// 输入输出样例
// 输入：points = [[10,16],[2,8],[1,6],[7,12]]
// 输出：2
// 解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球
// 输入：points = [[1,2],[3,4],[5,6],[7,8]]
// 输出：4
// 输入：points = [[1,2],[2,3],[3,4],[4,5]]
// 输出：2
// 输入：points = [[1,2]]
// 输出：1
// 输入：points = [[2,3],[2,3]]
// 输出：1

// 思路
// 选择保留区间时，区间的结尾十分重要，选择的区间结尾越小，预留给其他区间的空间就越大，就越能保留更多的区间
// 让右边界增序 从最左边的右边界 开始 射箭 
// 因为 右边界增序不可能存在包含的情况 也就是 [1, 6] - [2, 4]
// 判断 左边元素的右边界（必然小于右边元素的右边界） 大于右边元素的左边界
// [[10,16],[2,8],[1,6],[7,12]] 
// => [ [ 1, 6 ], [ 2, 8 ], [ 7, 12 ], [ 10, 16 ] ]
function findMinArrowShots(points=[[]]){
    if(!points.length){
        return 0;
    }
    points.sort((a, b) => a[1] - b[1]);
    console.log(points)
    let total = 1;
    let prev = points[0][1];
    let n = points.length;
    for(let i = 1; i < n; i++){
        console.log(prev)
        if(points[i][0] > prev){
            ++total;
            prev = points[i][1];
        }
    }
    return total;
}

console.log(findMinArrowShots([[10,16],[2,8],[1,6],[7,12]]))